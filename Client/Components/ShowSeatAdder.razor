@inject HttpClient Http
@using TicketReservationSystem.Shared
@using Blazorise.Components
@using Newtonsoft.Json
@inject IJSRuntime JSRuntime
<div class="hall">
  @if (AllSeats != null)
  {
    int rowIndex = 1;
    foreach (var row in AllSeats)
      { 
        <div class="hall-seats">
          <p class="row-index">@rowIndex</p>
          @for (int i = 0; i < row.Count; i++)
          {
            <SeatComponent CallBack="OnSeatClicked" Mode="show" Seat="@row[i]" />
          }
        </div>
        rowIndex++;
      }
  }
    <CustomAlert Color="Color.Warning" AlertDescr="AlertDe" AlertMessage="Seat is already reserved"/>
  <Button Color="Color.Primary" Type="ButtonType.Submit" Disabled="@(ReservedSeats.Count == 0)" Clicked="@(() => BuyTicketsCallBack(ReservedSeats))" Class="hall-form__button">Go to payment</Button>
</div>
@code {

        [Parameter]
        public HallDetailsModel HallDetails { get; set; }

        [Parameter]
        public List<List<Seat>> AllSeats { get; set; }

        [Parameter]
        public Action<List<Seat>> BuyTicketsCallBack { get; set; }

        [Parameter]
        public int MaxNumberOfTickets { get; set; }

        [Parameter]
        public int ShowId { get; set; }

        [Parameter]
        public Func<Task> FetchReservedSeats{ get; set; }

    public List<Seat> ReservedSeats { get; set; } = new List<Seat>();

    public async void OnSeatClicked(string number, string rowIndex)
    {
        int numberInt = Int32.Parse(number);
        int rowInt = Int32.Parse(rowIndex);
        var seat = AllSeats[rowInt][numberInt];
        var isReserved = await Http.GetFromJsonAsync<bool>("api/shows/" + ShowId + "/isseatreserved/" + seat.SeatId);
        if (isReserved) { await FetchReservedSeats.Invoke(); return; }
        if (seat.Type == SeatType.Disabled || seat.Status == SeatStatus.Reserved || seat.Status == SeatStatus.Bought) { Console.WriteLine(seat.Status); return; }
        switch (seat.Status)
        {
            case SeatStatus.Free:
                if (ReservedSeats.Count == MaxNumberOfTickets)
                {
                    return;
                }
                seat.Status = SeatStatus.Chosen;
                ReservedSeats.Add(seat);
                break;
            case SeatStatus.Chosen:
                seat.Status = SeatStatus.Free;
                ReservedSeats.Remove(seat);
                break;
        }
        StateHasChanged();
    }
}
