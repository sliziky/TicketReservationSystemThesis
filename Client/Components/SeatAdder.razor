@inject HttpClient Http
@using TicketReservationSystem.Shared
@using Blazorise.Components
@using Newtonsoft.Json
@inject IJSRuntime JSRuntime
<div class="hall">
  @if (AllSeats != null)
  {
    int rowIndex = 1;
    foreach (var row in AllSeats)
    {
<div class="hall-seats">
  <p class="row-index">@rowIndex</p>
  @for (int i = 0; i < row.Count; i++)
  {
<SeatComponent CallBack="OnSeatClicked"
               Mode="@Mode"
               Seat="@row[i]" />}
</div>rowIndex++;
}
}
  <Button Color="Color.Primary" Type="ButtonType.Submit" Disabled="@(AllSeats == null)" Clicked="OnAddHallClicked" Class="hall-form__button">Add hall with layout</Button>
</div>

@code {
    public bool DisplaySeats { get; set; } = false;

    [Parameter]
    public string Mode { get; set; } = "hall";
    [Parameter]
    public HallDetailsModel HallDetails { get; set; }

    [Parameter]
    public List<List<Seat>> AllSeats { get; set; }

    [Parameter]
    public Action<List<List<Seat>>> CallbackAddHall { get; set; }


    [Parameter]
    public Action<Seat> SeatModeCallBack{ get; set; }


    protected override void OnInitialized()
    {
      if (AllSeats.Count == 0)
      {
        GenerateSeatLayout();
      }
    }
    void OnAddHallClicked()
    {
      CallbackAddHall.Invoke(AllSeats);
    }

    public bool CanGenerateLayout { get; set; } = false;

    private void GenerateSeatLayout()
    {
      AllSeats = new List<List<Seat>>();
      for (int i = 0; i < Int32.Parse(HallDetails.Rows); i++)
      {
        List<Seat> Row = new List<Seat>();
        for (int j = 0; j < Int32.Parse(HallDetails.NumberOfSeatsInRow); j++)
        {
          Row.Add(new Seat() { Number = j, Row = i, Type = SeatType.Classic, Index = j });
        }
        AllSeats.Add(Row);
      }
    }

    public void OnSeatClicked(string number, string rowIndex)
    {
      int numberInt = Int32.Parse(number);
      int rowInt = Int32.Parse(rowIndex);
      var seat = AllSeats[rowInt][numberInt];
      if (Mode == "hall")
      {
        if (seat.Type == SeatType.Classic)
        {
          // Gotta secure that all seat numbers will be recalculated
          seat.Type = SeatType.Disabled;
          var row = AllSeats[rowInt];
          var startIndex = row.IndexOf(seat);
          for (int index = startIndex + 1; index < row.Count; index++)
          {
            row[index].Number -= 1;
          }
        }
        else if (seat.Type == SeatType.Disabled)
        {
          seat.Type = SeatType.Handicapped;
          var row = AllSeats[rowInt];
          var startIndex = row.IndexOf(seat);

          for (int index = startIndex + 1; index < row.Count; index++)
          {
            row[index].Number += 1;
          }
        }
        else
        {
          seat.Type = SeatType.Classic;
        }
      }
      if (Mode == "show")
      {
        switch (seat.Status)
        {
          case SeatStatus.Free:
            seat.Status = SeatStatus.Chosen;
            break;
          case SeatStatus.Chosen:
            seat.Status = SeatStatus.Free;
            break;
        }
        SeatModeCallBack.Invoke(seat);
      }
      StateHasChanged();
    }
}
