@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@using Blazorise.Components
@using Newtonsoft.Json

<EditForm OnValidSubmit="HandleValidSubmit" Class="hall-form" Model="HallDetails">
  <DataAnnotationsValidator />
  <Validations Mode="ValidationMode.Auto" Model="@HallDetails">
    <Fields Class="seat-adder__form__row">
      <Validation>
        <Field Class="hall-form__field" ColumnSize="ColumnSize.Is2.OnDesktop">
          <FieldLabel>Cinema</FieldLabel>
          <SelectList TItem="@Cinema"
                      TValue="int"
                      Data="@Cinemas"
                      TextField="@((item) => item.Name)"
                      ValueField="@((item) => item.CinemaId)"
                      SelectedValue="@SelectedCinema.CinemaId"
                      SelectedValueChanged="@MyListValueChangedHandler" />
        </Field>
      </Validation>
      <Validation>
        <Field ColumnSize="ColumnSize.Is2.OnDesktop" Class="hall-form__field">
          <FieldLabel>Name</FieldLabel>
          <TextEdit @bind-Text="@HallDetails.Name">
            <Feedback>
              <ValidationError />
            </Feedback>
          </TextEdit>
        </Field>
      </Validation>
      <Validation>
        <Field ColumnSize="ColumnSize.Is2.OnDesktop" Class="hall-form__field">
          <FieldLabel>Rows</FieldLabel>
          <TextEdit @bind-Text="@HallDetails.Rows">
            <Feedback>
              <ValidationError />
            </Feedback>
          </TextEdit>
        </Field>
      </Validation>
      <Validation>
        <Field ColumnSize="ColumnSize.Is2.OnDesktop" Class="hall-form__field">
          <FieldLabel>Number of seats in 1 row</FieldLabel>
          <TextEdit @bind-Text="@HallDetails.NumberOfSeatsInRow">
            <Feedback>
              <ValidationError />
            </Feedback>
          </TextEdit>
        </Field>
      </Validation>
    </Fields>
    <Fields Class="seat-adder__form__row seat-adder__form__row__alert">
        <Alert Color="Color.Primary" Visible="true" Style="width: 100%;">
          <AlertDescription>If you make any changes to the form above, don't forget to re-generate layout!</AlertDescription>
        </Alert>
    </Fields>
  </Validations>
  <Button Color="Color.Primary" Type="ButtonType.Submit" Class="hall-form__button" Disabled="Disabled">Generate layout</Button>
  
</EditForm>

@code {
    [Parameter]
    public HallDetailsModel HallDetails { get; set; }

    [Parameter]
    public Action CallbackAddHall { get; set; }

    [Parameter]
    public Action<List<List<Seat>>, HallDetailsModel, Hall> CallbackValidSubmit { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public FormMode FormMode { get; set; }

    public Hall Hall { get; set; }
    public bool DisplaySeats { get; set; } = false;
    public List<List<Seat>> AllSeats { get; set; } = new List<List<Seat>>();
    public List<Cinema> Cinemas { get; set; } = new List<Cinema>();

    [Parameter]
    public Cinema SelectedCinema { get; set; } = new Cinema();
    public bool CanGenerateLayout { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Cinemas = await Http.GetFromJsonAsync<List<Cinema>>("api/cinemas");
        if (FormMode == FormMode.New)
        {
            SelectedCinema.CinemaId = Cinemas[0].CinemaId;
        }
        if (FormMode == FormMode.Edit)
        {
            SelectedCinema.CinemaId = SelectedCinema.CinemaId;
        }
    }
    void MyListValueChangedHandler(int newC)
    {
        SelectedCinema = Cinemas.Where(c => c.CinemaId == newC).ToList()[0];
    }
    void HandleValidSubmit()
    {
        GenerateSeatLayout();
        DisplaySeats = true;
        Hall hall = new Hall()
        {
            Name = HallDetails.Name,
            Capacity = (uint)GetHallCapacity(),
            Cinema = Cinemas.Where(c => c.CinemaId == SelectedCinema.CinemaId).FirstOrDefault(),
            CinemaId = SelectedCinema.CinemaId,
            Rows = Int32.Parse(HallDetails.Rows)
        };
        CallbackValidSubmit.Invoke(AllSeats, HallDetails, hall);
    }
    private void GenerateSeatLayout()
    {
        AllSeats = new List<List<Seat>>();
        for (int i = 0; i < Int32.Parse(HallDetails.Rows); i++)
        {
            List<Seat> Row = new List<Seat>();
            for (int j = 0; j < Int32.Parse(HallDetails.NumberOfSeatsInRow); j++)
            {
                Row.Add(new Seat() { Number = j, Row = i, Type = SeatType.Classic, Index = j });
            }
            AllSeats.Add(Row);
        }
    }
    private int GetHallCapacity()
    {
        int capacity = 0;
        foreach (var row in AllSeats)
        {
            foreach (var seat in row)
            {
                if (seat.Type == SeatType.Classic || seat.Type == SeatType.Disabled)
                {
                    capacity++;
                }
            }
        }
        return capacity;
    }
}
