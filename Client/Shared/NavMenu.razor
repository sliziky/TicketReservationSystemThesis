@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService

<Bar Breakpoint="Breakpoint.Desktop"
     Background="Background.Primary"
     ThemeContrast="ThemeContrast.Dark">
  <BarToggler />
  <BarMenu>
    <BarStart Class="navbar-menu-center">
      <BarItem>
        <img src="./imgs/cinema_logo.png" class="cinema_logo" @onclick="@(e => NavigateTo("/"))" />
      </BarItem>
      <BarItem>
        <NavbarDropdownMenu Title="CINEMAS" Url="/cinema" />
      </BarItem>
      <BarItem>
        <NavbarDropdownMenu Title="MOVIES" Url="/movie"/>
      </BarItem>
      <BarItem>
        <NavbarDropdownMenu Title="HALLS" Url="/hall" />
      </BarItem>
      <BarItem>
        <NavbarDropdownMenu Title="SHOWS" Url="/show" />
      </BarItem>
    </BarStart>
    <BarEnd>
        <BarItem Class="bar__settings">

            @if (AuthenticationService.IsLoggedIn())
            {
                @if (AuthenticationService.IsUserAdmin())
                {
                    <BarDropdown>
                        <BarDropdownToggle Class="navbar__link">Settings</BarDropdownToggle>
                        <BarDropdownMenu Class="navbar__dropdown__menu">
                            <BarDropdownItem Class="navbar__dropdown__menu__item">
                                <BarLink To="/signup" Style="" Class="navbar__link">Create new account</BarLink>
                                <BarLink To="" Style="" Class="navbar__link">Change password</BarLink>
                            </BarDropdownItem>
 
                        </BarDropdownMenu>
                    </BarDropdown>
                    <Button Color="Color.Primary" @onclick="@(e => NavigateTo("/signup"))">Sign up</Button>
                }
                <Button Color="Color.Secondary" @onclick="@(OnLogOutClick)">Log Out</Button> }
            else
            {
                <Button Color="Color.Secondary" @onclick="@(e => NavigateTo("/login"))">Log in</Button>}
        </BarItem>
    </BarEnd>
  </BarMenu>
</Bar>
@code { public bool UserLoggedIn { get; set; }
    public bool SettingsClicked { get; set; }
    protected override async Task OnInitializedAsync()
    {
        AuthenticationService.OnChange += OnNotify;
    }
    public void OnSettingsClick() 
    {
        SettingsClicked = !SettingsClicked;
        StateHasChanged();
    }


    public async void OnNotify()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    protected override void OnParametersSet()
    {
        UserLoggedIn = AuthenticationService.IsLoggedIn();
        StateHasChanged();
    }
    private void NavigateTo(string url)
    {
        NavigationManager.NavigateTo(url);
    }
    private void OnLogOutClick()
    {
        AuthenticationService.LogOut();
        UserLoggedIn = false;
        StateHasChanged();
        NavigateTo("/");
    } }
