@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService

<Bar Breakpoint="Breakpoint.Desktop"
     Background="Background.Primary"
     ThemeContrast="ThemeContrast.Dark">
  <BarToggler />
  <BarMenu>
    <BarStart Class="navbar-menu-center">
      <BarItem>
        <img src="./imgs/cinema_logo.png" class="cinema_logo" @onclick="@(e => NavigateTo("/"))" />
      </BarItem>
      <BarItem>
        <NavbarDropdownMenu Title="CINEMAS" Url="/cinema" />
      </BarItem>
      <BarItem>
        <NavbarDropdownMenu Title="MOVIES" Url="/movie"/>
      </BarItem>
      <BarItem>
        <NavbarDropdownMenu Title="HALLS" Url="/halls" />
      </BarItem>
      <BarItem>
        <NavbarDropdownMenu Title="SHOWS" Url="/show" />
      </BarItem>
    </BarStart>
    <BarEnd>
      <BarItem>
        <Button Color="Color.Primary" @onclick="@(e => NavigateTo("/signup"))">Sign up</Button>
        @if (AuthenticationService.IsLoggedIn())
        {
<Button Color="Color.Secondary" @onclick="@(OnLogOutClick)">Log Out</Button> }
              else
              {
<Button Color="Color.Secondary" @onclick="@(e => NavigateTo("/login"))">Log in</Button>}
      </BarItem>
    </BarEnd>
  </BarMenu>
</Bar>
@code { public bool UserLoggedIn { get; set; }
    protected override async Task OnInitializedAsync()
    {
      AuthenticationService.OnChange += OnNotify;
    }


    public async void OnNotify()
    {
      await InvokeAsync(() =>
      {
        StateHasChanged();
      });
    }
    protected override void OnParametersSet()
    {
      Console.WriteLine(AuthenticationService.IsLoggedIn());
      Console.WriteLine("12");
      UserLoggedIn = AuthenticationService.IsLoggedIn();
      StateHasChanged();
    }
    private void NavigateTo(string url)
    {
      NavigationManager.NavigateTo(url);
    }
    private void OnLogOutClick()
    {
      AuthenticationService.LogOut();
      UserLoggedIn = false;
      StateHasChanged();
      NavigateTo("/");
    } }
