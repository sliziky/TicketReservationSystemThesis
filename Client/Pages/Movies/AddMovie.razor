@page "/movie/new"
@inject HttpClient Http
@inject IJSRuntime jsRuntime

@using System.ComponentModel.DataAnnotations;
<Authorized>
    <EditForm Model="@Movie" OnValidSubmit="@HandleValidSubmit" Class="login-form">
        <DataAnnotationsValidator />
        <Field>
            <FieldLabel>Movie</FieldLabel>
            <TextEdit @onchange="@onMovieTitleChange" @bind-Text="Movie.Title" />
        </Field>
        <Field>
            @if (LoadingMovies)
            {
                <LoadingCircle />
            }
            else
            {
                <FieldLabel>Suggestions</FieldLabel>
                <Select @bind-SelectedValue="@SelectedMovie" TValue="int">
                    @foreach (var movie in MoviesDetails)
                    {
                        <SelectItem Value="@movie.Id">@movie.Title @movie.ReleaseDate</SelectItem>
                    }
                </Select>
            }
        </Field>
        <Button Color="Color.Primary" Type="ButtonType.Submit" Clicked="@OnAddMovieClicked" Disabled="ProcessingMovie">Add Movie</Button>
    </EditForm>
    @if (ProcessingMovie)
    {
        <LoadingCircle />
    }
    <Alert Class="alert__success" Visible="@(Submitted && (int)Response.StatusCode == 200)" Style="margin-top: 10px;">
        <AlertMessage>Movie was added</AlertMessage>
    </Alert>
    <Alert Color="Color.Danger" Visible="@(Submitted && (int)Response.StatusCode != 200)" Style="margin-top: 10px;">
        <AlertMessage>Error occured during movie adding</AlertMessage>
    </Alert>
</Authorized>
@code {
    public int SelectedMovie { get; set; }
    public MovieResponseModel Suggestions { get; set; } = new MovieResponseModel();
    public MovieModel Movie { get; set; } = new MovieModel();
    public List<MovieDetailsModel> MoviesDetails { get; set; } = new List<MovieDetailsModel>();
    public bool LoadingMovies { get; set; } = false;
    public bool Submitted { get; set; } = false;
    public HttpResponseMessage Response = new HttpResponseMessage();
    public bool ProcessingMovie { get; set; } = false;
    private void HandleValidSubmit(EditContext editContext) { }
    private async void onMovieTitleChange()
    {
        if (Movie.Title.Length < 3) { return; }
        LoadingMovies = true;
        StateHasChanged();
        var requestUrl = "https://api.themoviedb.org/3/search/movie?api_key=74ddab1b7a6a8f69231b82aa88e83966&language=en-US&query=" + Movie.Title + "&page=1&include_adult=false";
        Suggestions = await Http.GetFromJsonAsync<MovieResponseModel>(requestUrl);
        MoviesDetails = new List<MovieDetailsModel>();
        foreach (var suggestion in Suggestions.Results)
        {
            var detailsRequestUrl = "https://api.themoviedb.org/3/movie/" + suggestion.Id + "?api_key=74ddab1b7a6a8f69231b82aa88e83966&language=en-US";
            var details = await Http.GetFromJsonAsync<MovieDetailsModel>(detailsRequestUrl);
            MoviesDetails.Add(details);
        }
        SelectedMovie = MoviesDetails[0].Id;
        LoadingMovies = false;
        StateHasChanged();
    }

    private async void OnAddMovieClicked()
    {
        ProcessingMovie = true;
        Submitted = true;
        StateHasChanged();
        var selectedMovie = MoviesDetails.Find(movie => movie.Id == SelectedMovie);
        MovieDTO movie = new MovieDTO();
        movie.Country = selectedMovie.Title;
        movie.Description = selectedMovie.Overview;
        movie.Genre = selectedMovie.Genres.Count != 0 ? selectedMovie.Genres[0].Name : "";
        movie.ImageUrl = selectedMovie.ImagePath;
        movie.Language = selectedMovie.OriginalLanguage;
        movie.Length = selectedMovie != null ? TimeSpan.FromMinutes(selectedMovie.Length.Value).ToString() : "-";
        movie.Released = selectedMovie.ReleaseDate != "" ? DateTime.Parse(selectedMovie.ReleaseDate) : null;
        movie.Shows = new List<MovieShow>();
        movie.Subtitles = false;
        movie.SubtitlesLanguage = "";
        movie.Title = selectedMovie.Title;
        Response = await Http.PostAsJsonAsync<MovieDTO>("api/movies", movie);
        ProcessingMovie = false;
        StateHasChanged();
    }
}
