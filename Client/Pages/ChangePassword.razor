@page "/changepassword"
@inject IJSRuntime jsRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService
@using TicketReservationSystem.Shared;
@using System.ComponentModel.DataAnnotations;
<Authorized>
    <EditForm Model="@PasswordChangeModel" OnValidSubmit="@HandleValidSubmit" Class="login-form">
        <DataAnnotationsValidator />
        <Validations Mode="ValidationMode.Auto" Model="@PasswordChangeModel">
            <Validation>
                <Field>
                    <FieldLabel>Old Password</FieldLabel>
                    <TextEdit Placeholder="Password..." Role="TextRole.Password" @bind-Text="@PasswordChangeModel.OldPassword" />
                </Field>
            </Validation>

            <Validation>
                <Field>
                    <FieldLabel>New Password</FieldLabel>
                    <TextEdit Placeholder="Password..." Role="TextRole.Password" @bind-Text="@PasswordChangeModel.NewPassword" />
                </Field>
            </Validation>

            <Validation>
                <Field>
                    <FieldLabel>Confirm New Password</FieldLabel>
                    <TextEdit Placeholder="Password..." Role="TextRole.Password" @bind-Text="@PasswordChangeModel.ConfirmNewPassword" />
                </Field>
            </Validation>
        </Validations>

        <Button Color="Color.Primary" Type="ButtonType.Submit">Change password</Button>
        @if(Submitted) 
        {
            @if ((int)Response.StatusCode == 200)
            {
                <Alert Color="Color.Success" Style="margin-top: 10px;" Visible="true">
                    <AlertMessage>Success</AlertMessage>
                    <AlertDescription>Password was changed successfully</AlertDescription>
                </Alert>
            }
            else 
            {
                <Alert Color="Color.Danger" Style="margin-top: 10px;" Visible="true">
                    <AlertMessage>Error</AlertMessage>
                    <AlertDescription>Old password is probably wrong</AlertDescription>
                </Alert>
            }
        }
    </EditForm>
</Authorized>

@code {
    private PasswordChange PasswordChangeModel = new PasswordChange();
    private HttpResponseMessage Response = new HttpResponseMessage();
    private bool Submitted = false;

    public class PasswordChange
    {
        [Required(ErrorMessage = "Password is required")]
        [StringLength(255, ErrorMessage = "Must be between 5 and 255 characters", MinimumLength = 5)]
        [DataType(DataType.Password)]
        public string OldPassword { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [StringLength(255, ErrorMessage = "Must be between 5 and 255 characters", MinimumLength = 5)]
        [DataType(DataType.Password)]
        public string NewPassword { get; set; }

        [Required(ErrorMessage = "Confirm Password is required")]
        [StringLength(255, ErrorMessage = "Must be between 5 and 255 characters", MinimumLength = 5)]
        [DataType(DataType.Password)]
        [Compare("NewPassword", ErrorMessage = "Password does not match")]
        public string ConfirmNewPassword { get; set; }
    }

    async void HandleValidSubmit()
    {
        var userDTO = AuthenticationService.GetCurrentUser();
        UserChangePassword user = new UserChangePassword() { Email = userDTO.Email, OldPassword = PasswordChangeModel.OldPassword, NewPassword = PasswordChangeModel.NewPassword };
        Response = await Http.PostAsJsonAsync<UserChangePassword>("api/users/changepassword", user);
        Submitted = true;
        StateHasChanged();
        if ((int)Response.StatusCode == 200) 
        {
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/");
        }
    }

}
