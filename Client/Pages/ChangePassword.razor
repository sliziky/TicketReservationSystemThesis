@page "/changepassword"
@inject IJSRuntime jsRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService
@using TicketReservationSystem.Shared;
@using System.ComponentModel.DataAnnotations;
<Authorized>
    <EditForm Model="@PasswordChangeModel" OnValidSubmit="@HandleValidSubmit" Class="login-form">
        <DataAnnotationsValidator />
        <Validations Mode="ValidationMode.Auto" Model="@PasswordChangeModel">
            <Validation>
                <Field>
                    <FieldLabel>Old Password</FieldLabel>
                    <TextEdit Placeholder="Password..." Role="TextRole.Password" @bind-Text="@PasswordChangeModel.OldPassword" />
                </Field>
            </Validation>

            <Validation>
                <Field>
                    <FieldLabel>New Password</FieldLabel>
                    <TextEdit Placeholder="Password..." Role="TextRole.Password" @bind-Text="@PasswordChangeModel.NewPassword" />
                </Field>
            </Validation>

            <Validation>
                <Field>
                    <FieldLabel>Confirm New Password</FieldLabel>
                    <TextEdit Placeholder="Password..." Role="TextRole.Password" @bind-Text="@PasswordChangeModel.ConfirmNewPassword" />
                </Field>
            </Validation>
        </Validations>

        <Button Color="Color.Primary" Type="ButtonType.Submit">Change password</Button>
        <Alert Color="Color.Danger" Visible="@_showErrorMsg" Style="margin-top: 10px;">
            <AlertMessage>User already exists</AlertMessage>
            <AlertDescription>User with such email already exists</AlertDescription>
        </Alert>
        <Alert Color="Color.Success" Visible="@_showSignedIn" Style="margin-top: 10px;">
            <AlertMessage>Successfully signed up. Redirecting to Home page</AlertMessage>
        </Alert>
    </EditForm>
</Authorized>

@code {
    private bool isAdmin = false;
    private PasswordChange PasswordChangeModel = new PasswordChange();
    private bool _showErrorMsg = false;
    private bool _showSignedIn = false;
    private bool _userLoggedIn = false;

    public class PasswordChange
    {
        [Required(ErrorMessage = "Password is required")]
        [StringLength(255, ErrorMessage = "Must be between 5 and 255 characters", MinimumLength = 5)]
        [DataType(DataType.Password)]
        public string OldPassword { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [StringLength(255, ErrorMessage = "Must be between 5 and 255 characters", MinimumLength = 5)]
        [DataType(DataType.Password)]
        public string NewPassword { get; set; }

        [Required(ErrorMessage = "Confirm Password is required")]
        [StringLength(255, ErrorMessage = "Must be between 5 and 255 characters", MinimumLength = 5)]
        [DataType(DataType.Password)]
        [Compare("NewPassword", ErrorMessage = "Password does not match")]
        public string ConfirmNewPassword { get; set; }
    }

    async void HandleValidSubmit()
    {
        var userDTO = AuthenticationService.GetCurrentUser();
        User user = new User() { Email=userDTO.Email, Password = PasswordChangeModel.NewPassword };
        var response = await Http.PostAsJsonAsync<User>("api/users/changepassword", user);
        StateHasChanged();
    }

}
