@page "/login"
@inject IJSRuntime jsRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService 
@using TicketReservationSystem.Shared;
@using System.ComponentModel.DataAnnotations;
@using Newtonsoft.Json 

<EditForm Model="@userData" OnValidSubmit="@HandleValidSubmit" Class="login-form">
    <DataAnnotationsValidator />
    <Validations Mode="ValidationMode.Auto" Model="@userData">
        <Validation>

        <Field>
            <FieldLabel>Email</FieldLabel>
            <TextEdit Placeholder="Enter email" Role="TextRole.Email" @bind-Text="@userData.Email" />
        </Field>
        </Validation>
        <Validation>

        <Field>
            <FieldLabel>Password</FieldLabel>
            <TextEdit Placeholder="Enter password" Role="TextRole.Password" @bind-Text="@userData.Password" />
        </Field>
        </Validation>
    </Validations>

    <Button Color="Color.Primary" Type="ButtonType.Submit">Log In</Button>
    <Alert Color="Color.Danger" Visible="@_showErrorMsg" Style="margin-top: 10px;">
        <AlertMessage>User does not exist or password is wrong</AlertMessage>
    </Alert>
    <Alert Color="Color.Success" Visible="@_showLoggedIn" Style="margin-top: 10px;">
        <AlertMessage>Successfully logged in. Redirecting to Home page</AlertMessage>
    </Alert>
</EditForm>


@code {
    private UserLogin userData = new UserLogin();
    private bool _showErrorMsg = false;
    private bool _showLoggedIn = false;
    private bool _userLoggedIn = false;
    public class UserLogin
    {
        [Required(ErrorMessage="Email is required")]
        [EmailAddress]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [StringLength(255, ErrorMessage = "Must be between 5 and 255 characters", MinimumLength = 5)]
        [DataType(DataType.Password)]
        public string Password { get; set; }
    }
    async void HandleValidSubmit(EditContext editContext)
    {
        if (await AuthenticationService.IsLoggedIn()) { return; }
        UserLogin model = (UserLogin)editContext.Model;
        var authenticated = await AuthenticationService.AuthenticateUser(model.Email, model.Password);
        if (authenticated)
        {
            _userLoggedIn = true;
            _showErrorMsg = false;
            _showLoggedIn = true;
            StateHasChanged();
            NavigationManager.NavigateTo("/", true);
        }
        else {
            _userLoggedIn = false;
            _showErrorMsg = true;
            _showLoggedIn = false;
            StateHasChanged();
        }
        await jsRuntime.InvokeAsync<string>("console.log", authenticated);
    }
}
