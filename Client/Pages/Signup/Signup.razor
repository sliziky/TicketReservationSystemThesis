@page "/signup"
@inject IJSRuntime jsRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using TicketReservationSystem.Shared;
@using System.ComponentModel.DataAnnotations;
<EditForm Model="@userData" OnValidSubmit="@HandleValidSubmit" Class="login-form">
    <DataAnnotationsValidator />
    <Validations Mode="ValidationMode.Auto" Model="@userData">
      <Validation>
        <Field>
          <FieldLabel>Name</FieldLabel>
          <TextEdit Placeholder="Name..." Role="TextRole.Text" @bind-Text="@userData.Name" />
        </Field>
      </Validation>
      <Validation>
        <Field>
          <FieldLabel>Email</FieldLabel>
          <TextEdit Placeholder="Email..." Role="TextRole.Email" @bind-Text="@userData.Email" />
        </Field>
      </Validation>
      <Validation>

        <Field>
          <FieldLabel>Password</FieldLabel>
          <TextEdit Placeholder="Password..." Role="TextRole.Password" @bind-Text="@userData.Password" />
        </Field>
      </Validation>
      <Validation>

        <Field>
          <FieldLabel>Confirm password</FieldLabel>
          <TextEdit Placeholder="Password..." Role="TextRole.Password" @bind-Text="@userData.ConfirmPassword" />
        </Field>
      </Validation>
      <Field>
          <p>Admin</p><input type="checkbox" @bind="isAdmin">
      </Field>
    </Validations>

    <Button Color="Color.Primary" Type="ButtonType.Submit">Sign Up</Button>
    <Alert Color="Color.Danger" Visible="@_showErrorMsg" Style="margin-top: 10px;">
        <AlertMessage>User already exists</AlertMessage>
        <AlertDescription>User with such email already exists</AlertDescription>
    </Alert>
    <Alert Color="Color.Success" Visible="@_showSignedIn" Style="margin-top: 10px;">
        <AlertMessage>Successfully signed up. Redirecting to Home page</AlertMessage>
    </Alert>
</EditForm>


@code {
    private bool isAdmin = false;
    private UserLogin userData = new UserLogin();
    private bool _showErrorMsg = false;
    private bool _showSignedIn = false;
    private bool _userLoggedIn = false;

    public class UserLogin
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [StringLength(255, ErrorMessage = "Must be between 5 and 255 characters", MinimumLength = 5)]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm Password is required")]
        [StringLength(255, ErrorMessage = "Must be between 5 and 255 characters", MinimumLength = 5)]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "Password does not match")]
        public string ConfirmPassword { get; set; }
    }

    async void HandleValidSubmit()
    {
        var user = new User() { Email = userData.Email, Password = userData.Password, Name = userData.Name };
        if (isAdmin) { user.Admin = new Admin(); }
        var response = await Http.PostAsJsonAsync<User>("api/users", user);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            _showSignedIn = true;
            StateHasChanged();
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/");

        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            _showErrorMsg = true;
        }
        StateHasChanged();
        Console.WriteLine(response.StatusCode);
    }

}
