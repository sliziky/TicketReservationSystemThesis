@page "/login"
@inject IJSRuntime jsRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using TicketReservationSystem.Shared;
@using System.ComponentModel.DataAnnotations;

<EditForm Model="@userData" OnValidSubmit="@HandleValidSubmit" Class="login-form">
  <DataAnnotationsValidator />
  <Field>
    <FieldLabel>Email</FieldLabel>
    <TextEdit Placeholder="Enter email" @bind-Text="@userData.Email" />
  </Field>
  <Field>
    <FieldLabel>Password</FieldLabel>
    <TextEdit Placeholder="Enter password" @bind-Text="@userData.Password" />
  </Field>
  <Button Color="Color.Primary" Type="ButtonType.Submit">Log In</Button>
  <Alert Color="Color.Danger" Visible="@_showErrorMsg" Style="margin-top: 10px;">
    <AlertMessage>User does not exist</AlertMessage>
    <AlertDescription>User with such email does not exist or password is wrong</AlertDescription>
  </Alert>
  <Alert Color="Color.Success" Visible="@_showLoggedIn" Style="margin-top: 10px;">
    <AlertMessage>Successfully logged in</AlertMessage>
  </Alert>
</EditForm>


@code { private UserLogin userData = new UserLogin();
    private bool _showErrorMsg = false;
    private bool _showLoggedIn = false;
    private bool _userLoggedIn = false;
    public class UserLogin
    {
      [Required]
      public string Email { get; set; }

      [Required]
      public string Password { get; set; }
    }
    async void HandleValidSubmit(EditContext editContext)
    {
      if (_userLoggedIn) { return; }
      UserLogin model = (UserLogin)editContext.Model;
      try
      {
        var user = await Http.GetFromJsonAsync<TicketReservationSystem.Shared.Domain.User>("api/users/" + model.Email);
        bool passwordValid = BCrypt.Net.BCrypt.Verify(model.Password + user.Salt, user.Password);
        if (passwordValid)
        {
          _userLoggedIn = true;
          _showErrorMsg = false;
          _showLoggedIn = true;
          StateHasChanged();
          await Task.Delay(1000);
          NavigationManager.NavigateTo("/");
        }
        await jsRuntime.InvokeAsync<string>("console.log", user, passwordValid);
      }
      catch (Exception)
      {
        _showLoggedIn = false;
        _showErrorMsg = true;
        StateHasChanged();
      }
    } }
