@page "/shows/{Id:int}"
@inject HttpClient Http
@using Newtonsoft.Json
@using TicketReservationSystem.Client.Components

<EditForm Model="@SeatPickerModel" OnValidSubmit="@HandleValidSubmit" Class="hall-form">
  <DataAnnotationsValidator />
  <Fields Class="seat-adder__form__row">
    <Field>
      <FieldLabel>Adults</FieldLabel>
      <Incrementor OnChange="OnIncrementorChange" />
    </Field>
    <Field>
      <FieldLabel>Kids</FieldLabel>
      <Incrementor OnChange="OnIncrementorChange" />

    </Field>
    <Field>
      <FieldLabel>Senior</FieldLabel>
      <Incrementor OnChange="OnIncrementorChange" />

    </Field>
    <Field>
      <FieldLabel>Students</FieldLabel>
      <Incrementor OnChange="OnIncrementorChange" />

    </Field>
  </Fields>
</EditForm>
<h3 class="screen__text">SCREEN</h3>

@if (Seats.Count != 0)
{
<ShowSeatAdder AllSeats="Seats" HallDetails="HallDetails" MaxNumberOfTickets="@CurrentNumberOfTickets" BuyTicketsCallBack="BuyTickets" />
}
@code { [Parameter]
    public int Id { get; set; }
    public SeatPickerModel SeatPickerModel { get; set; } = new SeatPickerModel();
    public MovieShow Show { get; set; } = new MovieShow();
    public List<List<Seat>> Seats { get; set; } = new List<List<Seat>>();
    public List<Seat> PickedSeats { get; set; } = new List<Seat>();
    public Hall Hall { get; set; } = new Hall();
    public int CurrentNumberOfTickets { get; set; } = 0;
    public int PickedSeatsCount { get; set; } = 0;
    public HallDetailsModel HallDetails { get; set; }
    protected async override Task OnInitializedAsync()
    {
      Show = await Http.GetFromJsonAsync<MovieShow>("api/shows/" + Id);
      Hall = await Http.GetFromJsonAsync<Hall>("api/halls/" + Show.HallId);

      var seats1D = Hall.Seats;
      var reservations = await Http.GetFromJsonAsync<List<Reservation>>("api/shows/" + Id + "/reservations");
      foreach (var reservation in reservations)
      {
        foreach (var rs in reservation.ReservationSeats)
        {
          foreach (var seat in rs.Seats)
          {
            var ss = seats1D.FirstOrDefault(i => i.SeatId == seat.SeatId);
            if (ss != null) { ss.Status = reservation.Payment != null ? SeatStatus.Bought : SeatStatus.Reserved; }
          }
        }
      }
      //var reservedSeats = await Http.GetFromJsonAsync<List<Seat>>("api/shows/ " + Show.MovieShowId + "/seatreservations");
      //foreach (var seat in reservedSeats)
      //{
      //  var ss = seats1D.FirstOrDefault(i => i.SeatId == seat.SeatId);
      //  if (ss != null) { ss.Status = SeatStatus.Bought; }
      //}
      Seats = TransformSeats(seats1D, Hall.Rows, Hall.Seats.Count);
      HallDetails = new HallDetailsModel() { Name = Hall.Name, NumberOfSeatsInRow = (Hall.Seats.Count / Hall.Rows).ToString(), Rows = Hall.Rows.ToString() };
    }
    void OnIncrementorChange(int value)
    {
      CurrentNumberOfTickets += value;
      StateHasChanged();
    }
    async void BuyTickets(List<Seat> seats)
    {
      PickedSeats = seats;
      await OnBuyTickets();
    }
    void HandleValidSubmit() { }

    async Task OnBuyTickets()
    {
      var reservation = new Reservation() { Created = DateTime.Now, Status = Reservation.ReservationStatus.NotPaid };
      var resp = await Http.PostAsJsonAsync<Reservation>("api/shows/" + Id + "/reservations", reservation);
      if (resp.StatusCode == System.Net.HttpStatusCode.OK)
      {
        var body = await resp.Content.ReadAsStringAsync();
        var desBody = JsonConvert.DeserializeObject<DeserializedReservationResponse>(body);
        var sr = new SeatReservation() { Price = 20 };
        var r = await Http.PostAsJsonAsync<SeatReservation>("api/reservations/" + desBody.ReservationId + "/seatreservation", sr);
        var body2 = await r.Content.ReadAsStringAsync();
        var desBody2 = JsonConvert.DeserializeObject<DeserializedSeatReservationResponse>(body2);

        foreach (var s in PickedSeats)
        {
          s.Status = SeatStatus.Reserved;
          var x = await Http.PostAsJsonAsync<Seat>("api/seatreservations/" + desBody2.SeatReservationId + "/seats", s);
        }
      }

    }
    public class DeserializedReservationResponse
    {
      public int ReservationId { get; set; }
    }
    public class DeserializedSeatReservationResponse
    {
      public int SeatReservationId { get; set; }
    }
    public List<List<Seat>> TransformSeats(List<Seat> seats, int rows, int seatsInRow)
    {
      List<List<Seat>> allSeats = new List<List<Seat>>();
      for (int i = 0; i < rows; i++)
      {
        List<Seat> row = new List<Seat>();
        for (int j = 0; j < seatsInRow / rows; j++)
        {
          row.Add(seats[i * rows + j]);
        }
        allSeats.Add(row);
      }
      return allSeats;
    } }
